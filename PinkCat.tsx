/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/pinkCat.glb --types --shadows 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Pattern_decor_design_T0004030_download_free_stl_files_3d_mo: THREE.Mesh
    Gato: THREE.Mesh
    RetopoFlow: THREE.Mesh
  }
  materials: {
    cat: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/pinkCat.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh castShadow receiveShadow geometry={nodes.Pattern_decor_design_T0004030_download_free_stl_files_3d_mo.geometry} material={nodes.Pattern_decor_design_T0004030_download_free_stl_files_3d_mo.material} position={[-0.011, 0.608, 0.064]} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.Gato.geometry} material={materials.cat} position={[0, -0.201, 0]} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.RetopoFlow.geometry} material={materials.cat} position={[0, -0.201, 0]} rotation={[Math.PI / 2, 0, 0]} />
    </group>
  )
}

useGLTF.preload('/pinkCat.glb')
